---
import Layout from '../layouts/Layout.astro';
import { getDefaultVendors, CONSUMPTION_LEVELS } from '../utils/calculations';
---

<Layout title="Energy Price Comparison">
  <div class="space-y-8">
    <!-- Vendor Management Section -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
      <button 
        class="vendor-accordion-trigger w-full px-4 py-3 text-left bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors flex justify-between items-center cursor-pointer"
        data-target="vendor-accordion"
        aria-expanded="false"
        aria-controls="vendor-accordion">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">üìä Vendor Management</h2>
        <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      <div 
        id="vendor-accordion" 
        class="vendor-accordion-content hidden bg-white dark:bg-gray-800"
        aria-labelledby="vendor-accordion">
        <div class="p-4">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div>
              <h3 class="text-base font-medium text-gray-800 dark:text-gray-200 mb-2">Add Custom Vendor</h3>
              <form id="vendorForm" class="space-y-2">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
                  <input type="text" id="vendorName" placeholder="Vendor Name" required
                    class="w-full px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm">
                  <input type="text" id="planName" placeholder="Plan Name" required
                    class="w-full px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm">
                </div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                  <input type="number" id="fixedPrice" placeholder="Fixed Price (‚Ç¨)" step="0.01" required
                    class="w-full px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm">
                  <input type="number" id="kwhPrice" placeholder="kWh Price (‚Ç¨)" step="0.0001" required
                    class="w-full px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm">
                  <input type="url" id="vendorLink" placeholder="Link (optional)"
                    class="w-full px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm">
                </div>
                <button type="submit" 
                  class="w-full bg-blue-600 dark:bg-blue-500 text-white py-1.5 px-4 rounded-md hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors cursor-pointer text-sm">
                  Add Vendor
                </button>
              </form>
            </div>
            <div>
              <h3 class="text-base font-medium text-gray-800 dark:text-gray-200 mb-2">Custom Vendors</h3>
              <div id="customVendorsList" class="space-y-1 max-h-32 overflow-y-auto">
                <!-- Custom vendors will be populated here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Plan Ranking Analysis Section -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
      <button 
        class="plan-ranking-accordion-trigger w-full px-4 py-3 text-left bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors flex justify-between items-center cursor-pointer"
        data-target="plan-ranking-accordion"
        aria-expanded="false"
        aria-controls="plan-ranking-accordion">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">üèÜ Plan Ranking Analysis</h2>
        <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      <div 
        id="plan-ranking-accordion" 
        class="plan-ranking-accordion-content hidden bg-white dark:bg-gray-800"
        aria-labelledby="plan-ranking-accordion">
        <div class="p-4">
          <div class="mb-4">
            <label for="planSelector" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Select a plan to analyze its ranking across consumption levels:
            </label>
            <select id="planSelector" 
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm">
              <option value="">Choose a plan...</option>
            </select>
          </div>
          
          <div id="planRankingResults" class="hidden">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Ranking Analysis for <span id="selectedPlanName" class="text-blue-600 dark:text-blue-400"></span></h3>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Ranking Table -->
              <div>
                <h4 class="text-base font-medium text-gray-800 dark:text-gray-200 mb-3">Ranking by Consumption Level</h4>
                <div class="overflow-x-auto">
                  <table class="w-full text-sm">
                                         <thead>
                       <tr class="bg-gray-50 dark:bg-gray-700">
                         <th class="text-left py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Consumption (kWh)</th>
                         <th class="text-center py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Rank</th>
                         <th class="text-right py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Total Price</th>
                         <th class="text-center py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Best Plan</th>
                         <th class="text-right py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Best Plan Price</th>
                       </tr>
                     </thead>
                    <tbody id="planRankingTable" class="divide-y divide-gray-200 dark:divide-gray-700">
                      <!-- Ranking data will be populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
              
              <!-- Summary Stats -->
              <div>
                <h4 class="text-base font-medium text-gray-800 dark:text-gray-200 mb-3">Summary Statistics</h4>
                <div class="space-y-3">
                  <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                    <div class="text-sm text-gray-600 dark:text-gray-400">Average Rank</div>
                    <div id="averageRank" class="text-lg font-semibold text-gray-900 dark:text-white">-</div>
                  </div>
                  <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                    <div class="text-sm text-gray-600 dark:text-gray-400">Best Rank</div>
                    <div id="bestRank" class="text-lg font-semibold text-green-600 dark:text-green-400">-</div>
                  </div>
                  <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                    <div class="text-sm text-gray-600 dark:text-gray-400">Worst Rank</div>
                    <div id="worstRank" class="text-lg font-semibold text-red-600 dark:text-red-400">-</div>
                  </div>
                  <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                    <div class="text-sm text-gray-600 dark:text-gray-400">Times Ranked #1</div>
                    <div id="timesFirst" class="text-lg font-semibold text-blue-600 dark:text-blue-400">-</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Price Comparison Tables -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-semibold text-gray-900 dark:text-white">üí∞ Price Comparison</h2>
        <div class="flex gap-2">
          <button id="expandAll" class="px-4 py-2 bg-green-600 dark:bg-green-500 text-white rounded-md hover:bg-green-700 dark:hover:bg-green-600 transition-colors text-sm cursor-pointer">
            Expand All
          </button>
          <button id="collapseAll" class="px-4 py-2 bg-gray-600 dark:bg-gray-500 text-white rounded-md hover:bg-gray-700 dark:hover:bg-gray-600 transition-colors text-sm cursor-pointer">
            Collapse All
          </button>
        </div>
      </div>
      <div class="space-y-4">
        {CONSUMPTION_LEVELS.map((kwh, index) => (
          <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
            <button 
              class="accordion-trigger w-full px-4 py-3 text-left bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors flex justify-between items-center cursor-pointer"
              data-target={`accordion-${kwh}`}
              aria-expanded="false"
              aria-controls={`accordion-${kwh}`}>
              <h3 class="text-lg font-medium text-gray-800 dark:text-gray-200">{kwh} kWh Consumption</h3>
              <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div 
              id={`accordion-${kwh}`} 
              class="accordion-content hidden bg-white dark:bg-gray-800"
              aria-labelledby={`accordion-${kwh}`}>
              <div class="p-4">
                <div class="overflow-x-auto">
                  <table class="w-full text-sm">
                    <thead>
                      <tr class="bg-gray-50 dark:bg-gray-700">
                        <th class="text-left py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Rank</th>
                        <th class="text-left py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Vendor</th>
                        <th class="text-left py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Plan</th>
                        <th class="text-right py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Fixed Price</th>
                        <th class="text-right py-2 px-3 font-medium text-gray-700 dark:text-gray-300">kWh Price</th>
                        <th class="text-right py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Total Price</th>
                        <th class="text-center py-2 px-3 font-medium text-gray-700 dark:text-gray-300">Link</th>
                      </tr>
                    </thead>
                    <tbody id={`table-${kwh}`} class="divide-y divide-gray-200 dark:divide-gray-700">
                      <!-- Data will be populated by JavaScript -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
  import { getDefaultVendors, calculateAllPrices, saveVendorsToStorage, loadVendorsFromStorage } from '../utils/calculations';
  import type { Vendor, PriceCalculation } from '../types/vendor';

  // Initialize vendors
  let allVendors: Vendor[] = [...getDefaultVendors(), ...loadVendorsFromStorage()];
  
  // Accordion functionality
  function initAccordions() {
    const accordionTriggers = document.querySelectorAll('.accordion-trigger');
    
    accordionTriggers.forEach(trigger => {
      trigger.addEventListener('click', () => {
        const targetId = trigger.getAttribute('data-target');
        const target = document.getElementById(targetId!);
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        
        // Toggle current accordion
        trigger.setAttribute('aria-expanded', (!isExpanded).toString());
        target!.classList.toggle('hidden', isExpanded);
        
        // Rotate arrow icon
        const arrow = trigger.querySelector('svg');
        arrow!.classList.toggle('rotate-180', !isExpanded);
      });
    });
  }

  // Initialize plan ranking accordion
  function initPlanRankingAccordion() {
    const planRankingAccordionTrigger = document.querySelector('.plan-ranking-accordion-trigger');
    
    if (planRankingAccordionTrigger) {
      planRankingAccordionTrigger.addEventListener('click', () => {
        const targetId = planRankingAccordionTrigger.getAttribute('data-target');
        const target = document.getElementById(targetId!);
        const isExpanded = planRankingAccordionTrigger.getAttribute('aria-expanded') === 'true';
        
        // Toggle plan ranking accordion
        planRankingAccordionTrigger.setAttribute('aria-expanded', (!isExpanded).toString());
        target!.classList.toggle('hidden', isExpanded);
        
        // Rotate arrow icon
        const arrow = planRankingAccordionTrigger.querySelector('svg');
        arrow!.classList.toggle('rotate-180', !isExpanded);
      });
    }
  }

  // Update plan selector
  function updatePlanSelector() {
    const planSelector = document.getElementById('planSelector') as HTMLSelectElement;
    if (!planSelector) return;

    // Clear existing options except the first one
    planSelector.innerHTML = '<option value="">Choose a plan...</option>';
    
    // Add all vendors and plans
    allVendors.forEach(vendor => {
      const option = document.createElement('option');
      option.value = `${vendor.vendor}|${vendor.plan}`;
      option.textContent = `${vendor.vendor} - ${vendor.plan}`;
      planSelector.appendChild(option);
    });
  }

  // Find plan ranking for a specific vendor/plan across all consumption levels
  function findPlanRanking(selectedVendor: string, selectedPlan: string) {
    const consumptionLevels = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500];
    const rankings: { kwh: number; rank: number; totalPrice: number; bestPlan: string; bestPlanPrice: number }[] = [];
    
    consumptionLevels.forEach(kwh => {
      const calculations = calculateAllPrices(allVendors, kwh);
      const planIndex = calculations.findIndex(calc => 
        calc.vendor === selectedVendor && calc.plan === selectedPlan
      );
      
      if (planIndex !== -1) {
        rankings.push({
          kwh,
          rank: planIndex + 1,
          totalPrice: calculations[planIndex].totalPrice,
          bestPlan: calculations[0].plan,
          bestPlanPrice: calculations[0].totalPrice
        });
      }
    });
    
    return rankings;
  }

  // Update plan ranking results
  function updatePlanRankingResults() {
    const planSelector = document.getElementById('planSelector') as HTMLSelectElement;
    const resultsDiv = document.getElementById('planRankingResults');
    const selectedPlanName = document.getElementById('selectedPlanName');
    const rankingTable = document.getElementById('planRankingTable');
    
    if (!planSelector || !resultsDiv || !selectedPlanName || !rankingTable) return;
    
    const selectedValue = planSelector.value;
    if (!selectedValue) {
      resultsDiv.classList.add('hidden');
      return;
    }
    
    const [selectedVendor, selectedPlan] = selectedValue.split('|');
    const rankings = findPlanRanking(selectedVendor, selectedPlan);
    
    if (rankings.length === 0) {
      resultsDiv.classList.add('hidden');
      return;
    }
    
    // Update plan name
    selectedPlanName.textContent = `${selectedVendor} - ${selectedPlan}`;
    
         // Update ranking table
     rankingTable.innerHTML = rankings.map(ranking => `
       <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
         <td class="py-2 px-3 text-gray-900 dark:text-white font-medium">${ranking.kwh} kWh</td>
         <td class="py-2 px-3 text-center">
           <span class="inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-medium ${
             ranking.rank === 1 ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
             ranking.rank <= 3 ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :
             ranking.rank <= 5 ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
             'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
           }">${ranking.rank}</span>
         </td>
         <td class="py-2 px-3 text-right text-gray-700 dark:text-gray-300">‚Ç¨${ranking.totalPrice.toFixed(2)}</td>
         <td class="py-2 px-3 text-center text-sm text-gray-600 dark:text-gray-400">${ranking.bestPlan}</td>
         <td class="py-2 px-3 text-right text-gray-700 dark:text-gray-300">‚Ç¨${ranking.bestPlanPrice.toFixed(2)}</td>
       </tr>
     `).join('');
    
    // Update summary statistics
    const ranks = rankings.map(r => r.rank);
    const averageRank = (ranks.reduce((sum, rank) => sum + rank, 0) / ranks.length).toFixed(1);
    const bestRank = Math.min(...ranks);
    const worstRank = Math.max(...ranks);
    const timesFirst = ranks.filter(rank => rank === 1).length;
    
    document.getElementById('averageRank')!.textContent = averageRank;
    document.getElementById('bestRank')!.textContent = bestRank.toString();
    document.getElementById('worstRank')!.textContent = worstRank.toString();
    document.getElementById('timesFirst')!.textContent = timesFirst.toString();
    
    resultsDiv.classList.remove('hidden');
  }

  // Expand all accordions
  function expandAll() {
    const accordionTriggers = document.querySelectorAll('.accordion-trigger');
    const accordionContents = document.querySelectorAll('.accordion-content');
    const arrows = document.querySelectorAll('.accordion-trigger svg');
    
    accordionTriggers.forEach((trigger, index) => {
      trigger.setAttribute('aria-expanded', 'true');
      accordionContents[index].classList.remove('hidden');
      arrows[index].classList.add('rotate-180');
    });
  }

  // Collapse all accordions
  function collapseAll() {
    const accordionTriggers = document.querySelectorAll('.accordion-trigger');
    const accordionContents = document.querySelectorAll('.accordion-content');
    const arrows = document.querySelectorAll('.accordion-trigger svg');
    
    accordionTriggers.forEach((trigger, index) => {
      trigger.setAttribute('aria-expanded', 'false');
      accordionContents[index].classList.add('hidden');
      arrows[index].classList.remove('rotate-180');
    });
  }
  
  // Update all tables
  function updateAllTables() {
    const consumptionLevels = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500];
    
    consumptionLevels.forEach(kwh => {
      const calculations = calculateAllPrices(allVendors, kwh);
      updateTable(kwh, calculations);
    });
  }

  // Update specific table
  function updateTable(kwh: number, calculations: PriceCalculation[]) {
    const tableBody = document.getElementById(`table-${kwh}`);
    if (!tableBody) return;

    tableBody.innerHTML = calculations.map((calc, index) => `
      <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 ${index === 0 ? 'bg-green-50 dark:bg-green-900/20' : ''}">
        <td class="py-2 px-3 text-gray-900 dark:text-white font-medium">${index + 1}</td>
        <td class="py-2 px-3 text-gray-900 dark:text-white">${calc.vendor}</td>
        <td class="py-2 px-3 text-gray-700 dark:text-gray-300">${calc.plan}</td>
        <td class="py-2 px-3 text-right text-gray-700 dark:text-gray-300">‚Ç¨${calc.fixedPrice.toFixed(2)}</td>
        <td class="py-2 px-3 text-right text-gray-700 dark:text-gray-300">‚Ç¨${calc.kwhPrice.toFixed(4)}</td>
        <td class="py-2 px-3 text-right font-semibold text-gray-900 dark:text-white">‚Ç¨${calc.totalPrice.toFixed(2)}</td>
        <td class="py-2 px-3 text-center">
          ${calc.link ? `<a href="${calc.link}" target="_blank" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline">Visit</a>` : '-'}
        </td>
      </tr>
    `).join('');
  }

  // Update custom vendors list
  function updateCustomVendorsList() {
    const customVendors = loadVendorsFromStorage();
    const container = document.getElementById('customVendorsList');
    if (!container) return;

    container.innerHTML = customVendors.map((vendor, index) => `
      <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded-md">
        <div class="flex-1">
          <div class="font-medium text-gray-900 dark:text-white text-sm">${vendor.vendor} - ${vendor.plan}</div>
          <div class="text-xs text-gray-600 dark:text-gray-400">Fixed: ‚Ç¨${vendor.fixedPrice} | kWh: ‚Ç¨${vendor.kwhPrice}</div>
        </div>
        <button onclick="removeCustomVendor(${index})" 
          class="ml-2 text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-xs font-medium cursor-pointer">
          Remove
        </button>
      </div>
    `).join('');
  }

  // Add custom vendor
  function addCustomVendor(event: Event) {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    
    const vendor: Vendor = {
      vendor: (document.getElementById('vendorName') as HTMLInputElement).value,
      plan: (document.getElementById('planName') as HTMLInputElement).value,
      fixedPrice: parseFloat((document.getElementById('fixedPrice') as HTMLInputElement).value),
      kwhPrice: parseFloat((document.getElementById('kwhPrice') as HTMLInputElement).value),
      link: (document.getElementById('vendorLink') as HTMLInputElement).value || ''
    };

    const customVendors = loadVendorsFromStorage();
    customVendors.push(vendor);
    saveVendorsToStorage(customVendors);
    
    // Update all vendors and tables
    allVendors = [...getDefaultVendors(), ...customVendors];
    updateAllTables();
    updateCustomVendorsList();
    updatePlanSelector();
    
    // Reset form
    form.reset();
  }

  // Remove custom vendor
  function removeCustomVendor(index: number) {
    const customVendors = loadVendorsFromStorage();
    customVendors.splice(index, 1);
    saveVendorsToStorage(customVendors);
    
    // Update all vendors and tables
    allVendors = [...getDefaultVendors(), ...customVendors];
    updateAllTables();
    updateCustomVendorsList();
    updatePlanSelector();
  }

  // Initialize vendor accordion
  function initVendorAccordion() {
    const vendorAccordionTrigger = document.querySelector('.vendor-accordion-trigger');
    
    if (vendorAccordionTrigger) {
      vendorAccordionTrigger.addEventListener('click', () => {
        const targetId = vendorAccordionTrigger.getAttribute('data-target');
        const target = document.getElementById(targetId!);
        const isExpanded = vendorAccordionTrigger.getAttribute('aria-expanded') === 'true';
        
        // Toggle vendor accordion
        vendorAccordionTrigger.setAttribute('aria-expanded', (!isExpanded).toString());
        target!.classList.toggle('hidden', isExpanded);
        
        // Rotate arrow icon
        const arrow = vendorAccordionTrigger.querySelector('svg');
        arrow!.classList.toggle('rotate-180', !isExpanded);
      });
    }
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Set up form submission
    const form = document.getElementById('vendorForm');
    if (form) {
      form.addEventListener('submit', addCustomVendor);
    }

    // Set up plan selector change
    const planSelector = document.getElementById('planSelector');
    if (planSelector) {
      planSelector.addEventListener('change', updatePlanRankingResults);
    }

    // Initialize accordions
    initAccordions();
    initVendorAccordion();
    initPlanRankingAccordion();

    // Set up expand/collapse all buttons
    const expandAllBtn = document.getElementById('expandAll');
    const collapseAllBtn = document.getElementById('collapseAll');
    
    if (expandAllBtn) {
      expandAllBtn.addEventListener('click', expandAll);
    }
    
    if (collapseAllBtn) {
      collapseAllBtn.addEventListener('click', collapseAll);
    }

    // Make removeCustomVendor available globally
    (window as any).removeCustomVendor = removeCustomVendor;

    // Initial render
    updateAllTables();
    updateCustomVendorsList();
    updatePlanSelector();
  });
</script>
