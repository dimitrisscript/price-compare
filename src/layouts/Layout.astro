---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Energy Price Comparison Tool" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
      <header class="text-center mb-8">
        <div class="mb-6">
          <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2" id="main-title">⚡ Energy Price Comparison</h1>
        </div>
        <p class="text-lg text-gray-600 dark:text-gray-300" id="main-description">Compare electricity prices across different vendors and consumption levels</p>
        
        <!-- Language Selector -->
        <div class="mt-6 flex justify-center">
          <div class="flex items-center space-x-2 bg-white dark:bg-gray-800 rounded-lg shadow-md px-4 py-2">
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300" id="language-label">Language</span>
            <select id="language-selector" class="ml-2 px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400">
              <option value="en">English</option>
              <option value="el">Ελληνικά</option>
            </select>
          </div>
        </div>
      </header>
      <slot />
    </div>
    
    <!-- Footer -->
    <footer class="mt-12 py-6 border-t border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 text-center">
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2" id="footer-last-update" data-translate="lastUpdate">Last update: 2025-08-08</p>
        <p class="text-sm text-gray-500 dark:text-gray-400" id="footer-disclaimer" data-translate="footerDisclaimer">This page compares only the fixed (blue) tariffs of providers.</p>
        <p class="text-sm text-gray-500 dark:text-gray-400">Powered by <a href="https://dimitris.siakavelis.gr" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer">Dimitris Siakavelis</a>.</p>
      </div>
    </footer>
  </body>
</html>

<style is:global>
  @import '../styles/global.css';
</style>

<script>
  import { getCurrentLanguage, setLanguage, getTranslation } from '../i18n/translations';

  // Initialize language
  function initializeLanguage() {
    const languageSelector = document.getElementById('language-selector') as HTMLSelectElement;
    const currentLang = getCurrentLanguage();
    
    if (languageSelector) {
      languageSelector.value = currentLang;
      updatePageContent();
    }
  }

  // Update page content based on selected language
  function updatePageContent() {
    const mainTitle = document.getElementById('main-title');
    const mainDescription = document.getElementById('main-description');
    const languageLabel = document.getElementById('language-label');
    
    if (mainTitle) {
      mainTitle.textContent = `⚡ ${getTranslation('title')}`;
    }
    
    if (mainDescription) {
      mainDescription.textContent = getTranslation('description');
    }
    
    if (languageLabel) {
      languageLabel.textContent = getTranslation('languageSelect');
    }
  }

  // Handle language change
  function handleLanguageChange(event: Event) {
    const target = event.target as HTMLSelectElement;
    const newLanguage = target.value;
    
    setLanguage(newLanguage);
    updatePageContent();
    
    // Dispatch custom event to notify other components
    window.dispatchEvent(new CustomEvent('languageChanged', { detail: { language: newLanguage } }));
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeLanguage();
    
    const languageSelector = document.getElementById('language-selector');
    if (languageSelector) {
      languageSelector.addEventListener('change', handleLanguageChange);
    }
  });
</script> 